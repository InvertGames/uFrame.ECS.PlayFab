// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Playfab {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Json;
    using UniRx;
    using UnityEngine;
    using uFrame.ECS;
    
    
    [uFrame.Attributes.ComponentId(18)]
    [uFrame.Attributes.uFrameIdentifier("fd9c2198-3f14-4e2f-91a9-83e64af386ea")]
    public partial class ClickCount : uFrame.ECS.EcsComponent, IPlayerStat {
        
        [UnityEngine.SerializeField()]
        private Int32 _Count;
        
        private static System.Reflection.PropertyInfo[] _PlayerStatMembers;
        
        private Subject<PropertyChangedEvent<Int32>> _CountObservable;
        
        private PropertyChangedEvent<Int32> _CountEvent;
        
        public override int ComponentId {
            get {
                return 18;
            }
        }
        
        public IObservable<PropertyChangedEvent<Int32>> CountObservable {
            get {
                return _CountObservable ?? (_CountObservable = new Subject<PropertyChangedEvent<Int32>>());
            }
        }
        
        [PlayerStatAttribute()]
        public Int32 Count {
            get {
                return _Count;
            }
            set {
                SetCount(value);
            }
        }
        
        public System.Reflection.PropertyInfo[] PlayerStatMembers {
            get {
                if (_PlayerStatMembers == null) {
                    _PlayerStatMembers = this.GetDescriptorProperties<PlayerStatAttribute>().ToArray();
                }
                return _PlayerStatMembers;
            }
        }
        
        public virtual void SetCount(Int32 value) {
            SetProperty(ref _Count, value, ref _CountEvent, _CountObservable);
        }
    }
}
