// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Playfab {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.ECS;
    using UniRx;
    using Playfab;
    using UnityEngine.UI;
    
    
    public partial class NotificationsUISystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<NotificationUI> _NotificationUIManager;
        
        public IEcsComponentManagerOf<NotificationUI> NotificationUIManager {
            get {
                return _NotificationUIManager;
            }
            set {
                _NotificationUIManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            NotificationUIManager = ComponentSystem.RegisterComponent<NotificationUI>(20);
            this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ DisableAllNotificationUIFilter(_); }).DisposeWith(this);
            this.OnEvent<Playfab.NotificationMessage>().Subscribe(_=>{ DisplayNotificationMessageFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void DisableAllNotificationUIHandler(uFrame.Kernel.GameReadyEvent data, NotificationUI group) {
        }
        
        protected void DisableAllNotificationUIFilter(uFrame.Kernel.GameReadyEvent data) {
            var NotificationUIItems = NotificationUIManager.Components;
            for (var NotificationUIIndex = 0
            ; NotificationUIIndex < NotificationUIItems.Count; NotificationUIIndex++
            ) {
                if (!NotificationUIItems[NotificationUIIndex].Enabled) {
                    continue;
                }
                this.DisableAllNotificationUIHandler(data, NotificationUIItems[NotificationUIIndex]);
            }
        }
        
        protected virtual void DisplayNotificationMessageHandler(Playfab.NotificationMessage data, NotificationUI group) {
        }
        
        protected void DisplayNotificationMessageFilter(Playfab.NotificationMessage data) {
            var NotificationUIItems = NotificationUIManager.Components;
            for (var NotificationUIIndex = 0
            ; NotificationUIIndex < NotificationUIItems.Count; NotificationUIIndex++
            ) {
                if (!NotificationUIItems[NotificationUIIndex].Enabled) {
                    continue;
                }
                this.DisplayNotificationMessageHandler(data, NotificationUIItems[NotificationUIIndex]);
            }
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("f449a859-4ace-4b46-a05b-103cc98dd01e")]
    public partial class NotificationsUISystem : NotificationsUISystemBase {
        
        private static NotificationsUISystem _Instance;
        
        public NotificationsUISystem() {
            Instance = this;
        }
        
        public static NotificationsUISystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
